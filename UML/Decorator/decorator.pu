@startuml

HouseBlend .up.|> IBeverage
DarkRoast .up.|> IBeverage
Espresso .up.|> IBeverage

CondimentDecorator .up.|> IBeverage

Milk -up-|> CondimentDecorator
Mocha -up-|> CondimentDecorator
Whip -up-|> CondimentDecorator

interface IBeverage {
    + string Description
    + void GetDescription()
    + double Cost()
}

class HouseBlend {
}

class DarkRoast {
}

class Espresso {
}

abstract class CondimentDecorator {
    # IBeverage _beverage
    + {abstract} string Description
    + {abstract} string GetDescription()
    + {abstract} double Cost()
}

class Milk {
    + Milk(IBeverage beverage)
}

class Mocha {
    + Mocha(IBeverage beverage)
}

class Whip {
    + Whip(IBeverage beverage)
}

note left of CondimentDecorator 
    IBevarageを実装する理由は
    スーパークラスの型を取得するため。
    これを継承するクラスはBeverageを装飾することができる
end note

note left of IBeverage
    全てのオブジェクトはこの抽象インタフェースを起点に操作する
    特定の具象コンポーネントに対する操作がしたい時は設計を見直す必要がある。
    例えば、HouseBlendのみ割引したい時とか、
    装飾により型の情報は破壊されているので。。
end note
@enduml